// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using myapp.api.Models;

namespace myapp.api.Data;

public partial class AppDbContext : DbContext
{
    public AppDbContext()
    {
    }

    public AppDbContext(DbContextOptions<AppDbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Doki> Dokis { get; set; }

    public virtual DbSet<KierowcaSamochod> KierowcaSamochods { get; set; }

    public virtual DbSet<Kierowcy> Kierowcies { get; set; }

    public virtual DbSet<Ladunek> Laduneks { get; set; }

    public virtual DbSet<OdjazdyKraj> OdjazdyKrajs { get; set; }

    public virtual DbSet<OdjazdyOkolica> OdjazdyOkolicas { get; set; }

    public virtual DbSet<PaczkaLadunek> PaczkaLaduneks { get; set; }

    public virtual DbSet<Paczki> Paczkis { get; set; }

    public virtual DbSet<Pracownicy> Pracownicies { get; set; }

    public virtual DbSet<PracownikLadunek> PracownikLaduneks { get; set; }

    public virtual DbSet<Region> Regions { get; set; }

    public virtual DbSet<Rejon> Rejons { get; set; }

    public virtual DbSet<Samochody> Samochodies { get; set; }

    public virtual DbSet<Uprawnienium> Uprawnienia { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=io-poczta.database.windows.net;Initial Catalog=PocztaDB;Persist Security Info=True;User ID=kubaadmin;Password=MikroMitch13");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Doki>(entity =>
        {
            entity.HasKey(e => e.NrDoku).HasName("Doki$PrimaryKey");

            entity.ToTable("Doki");

            entity.Property(e => e.NrDoku).HasColumnName("Nr_Doku");
            entity.Property(e => e.Typ).HasMaxLength(255);
        });

        modelBuilder.Entity<KierowcaSamochod>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Kierowca_Samochod");

            entity.HasIndex(e => e.IdSamochodu, "Kierowca_Samochod$Id_Samochodu");

            entity.HasIndex(e => e.IdKierowcy, "Kierowca_Samochod$PrimaryKey");

            entity.Property(e => e.IdKierowcy)
                .HasDefaultValue(0)
                .HasColumnName("Id_Kierowcy");
            entity.Property(e => e.IdSamochodu)
                .HasDefaultValue(0)
                .HasColumnName("Id_Samochodu");

            entity.HasOne(d => d.IdKierowcyNavigation).WithMany()
                .HasForeignKey(d => d.IdKierowcy)
                .HasConstraintName("Kierowca_Samochod$KierowcyKierowca_Samochod");

            entity.HasOne(d => d.IdSamochoduNavigation).WithMany()
                .HasForeignKey(d => d.IdSamochodu)
                .HasConstraintName("Kierowca_Samochod$SamochodyKierowca_Samochod");
        });

        modelBuilder.Entity<Kierowcy>(entity =>
        {
            entity.HasKey(e => e.IdKierowcy).HasName("Kierowcy$PrimaryKey");

            entity.ToTable("Kierowcy");

            entity.Property(e => e.IdKierowcy).HasColumnName("Id_Kierowcy");
            entity.Property(e => e.Adres).HasMaxLength(255);
            entity.Property(e => e.Imię).HasMaxLength(255);
            entity.Property(e => e.Nazwisko).HasMaxLength(255);
            entity.Property(e => e.NrTelefonu)
                .HasMaxLength(255)
                .HasColumnName("Nr_telefonu");
        });

        modelBuilder.Entity<Ladunek>(entity =>
        {
            entity.HasKey(e => e.IdLadunek).HasName("Ladunek$PrimaryKey");

            entity.ToTable("Ladunek");

            entity.HasIndex(e => e.IdSamochod, "Ladunek$Id_Samochod");

            entity.Property(e => e.IdLadunek).HasColumnName("Id_Ladunek");
            entity.Property(e => e.IdSamochod)
                .HasDefaultValue(0)
                .HasColumnName("Id_Samochod");
            entity.Property(e => e.Status).HasMaxLength(255);

            entity.HasOne(d => d.IdSamochodNavigation).WithMany(p => p.Laduneks)
                .HasForeignKey(d => d.IdSamochod)
                .HasConstraintName("Ladunek$SamochodyLadunek");
        });

        modelBuilder.Entity<OdjazdyKraj>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Odjazdy_Kraj");

            entity.HasIndex(e => e.IdLadunek, "Odjazdy_Kraj$Id_Ladunek");

            entity.HasIndex(e => e.NrDoku, "Odjazdy_Kraj$Odjazdy_KrajNr_Doku");

            entity.Property(e => e.CzasOdjazdu)
                .HasMaxLength(255)
                .HasColumnName("Czas_odjazdu");
            entity.Property(e => e.IdLadunek)
                .HasDefaultValue(0)
                .HasColumnName("Id_Ladunek");
            entity.Property(e => e.IdRegion)
                .HasMaxLength(255)
                .HasColumnName("Id_Region");
            entity.Property(e => e.NrDoku)
                .HasDefaultValue(0)
                .HasColumnName("Nr_doku");

            entity.HasOne(d => d.IdLadunekNavigation).WithMany()
                .HasForeignKey(d => d.IdLadunek)
                .HasConstraintName("Odjazdy_Kraj$LadunekOdjazdy_Kraj");

            entity.HasOne(d => d.IdRegionNavigation).WithMany()
                .HasForeignKey(d => d.IdRegion)
                .HasConstraintName("Odjazdy_Kraj$RegionOdjazdy_Kraj");

            entity.HasOne(d => d.NrDokuNavigation).WithMany()
                .HasForeignKey(d => d.NrDoku)
                .HasConstraintName("Odjazdy_Kraj$DokiOdjazdy_Kraj");
        });

        modelBuilder.Entity<OdjazdyOkolica>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Odjazdy_Okolica");

            entity.HasIndex(e => e.IdLadunek, "Odjazdy_Okolica$Id_Samochod");

            entity.HasIndex(e => e.NrDoku, "Odjazdy_Okolica$Odjazdy_OkolicaNr_Doku");

            entity.Property(e => e.CzasOdjazdu)
                .HasPrecision(0)
                .HasColumnName("Czas_odjazdu");
            entity.Property(e => e.IdLadunek)
                .HasDefaultValue(0)
                .HasColumnName("Id_Ladunek");
            entity.Property(e => e.IdRejon)
                .HasMaxLength(255)
                .HasColumnName("Id_Rejon");
            entity.Property(e => e.NrDoku)
                .HasDefaultValue(0)
                .HasColumnName("Nr_doku");

            entity.HasOne(d => d.IdLadunekNavigation).WithMany()
                .HasForeignKey(d => d.IdLadunek)
                .HasConstraintName("Odjazdy_Okolica$LadunekOdjazdy_Okolica");

            entity.HasOne(d => d.IdRejonNavigation).WithMany()
                .HasForeignKey(d => d.IdRejon)
                .HasConstraintName("Odjazdy_Okolica$RejonOdjazdy_Okolica");

            entity.HasOne(d => d.NrDokuNavigation).WithMany()
                .HasForeignKey(d => d.NrDoku)
                .HasConstraintName("Odjazdy_Okolica$DokiOdjazdy_Okolica");
        });

        modelBuilder.Entity<PaczkaLadunek>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Paczka_Ladunek");

            entity.HasIndex(e => e.IdLadunku, "Paczka_Ladunek$Id_Ladunku");

            entity.Property(e => e.IdLadunku)
                .HasDefaultValue(0)
                .HasColumnName("Id_Ladunku");
            entity.Property(e => e.IdPaczki)
                .HasDefaultValue(0)
                .HasColumnName("Id_Paczki");

            entity.HasOne(d => d.IdLadunkuNavigation).WithMany()
                .HasForeignKey(d => d.IdLadunku)
                .HasConstraintName("Paczka_Ladunek$LadunekPaczka_Ladunek");

            entity.HasOne(d => d.IdPaczkiNavigation).WithMany()
                .HasForeignKey(d => d.IdPaczki)
                .HasConstraintName("Paczka_Ladunek$PaczkiPaczka_Ladunek");
        });


        modelBuilder.Entity<Paczki>(entity =>
        {
            entity.HasKey(e => e.IdPaczki).HasName("Paczki$PrimaryKey");

            entity.ToTable("Paczki");

            entity.HasIndex(e => e.KodPocztowyNadawcy, "Paczki$Kod_Pocztowy");

            entity.Property(e => e.IdPaczki).HasColumnName("Id_Paczki");
            entity.Property(e => e.AdresNadawcy)
                .HasMaxLength(255)
                .HasColumnName("Adres_Nadawcy");
            entity.Property(e => e.AdresOdbiorcy)
                .HasMaxLength(255)
                .HasColumnName("Adres_Odbiorcy");
            entity.Property(e => e.CzyZniszczona).HasColumnName("czyZniszczona");
            entity.Property(e => e.DaneNadawcy)
                .HasMaxLength(255)
                .HasColumnName("Dane_Nadawcy");
            entity.Property(e => e.DaneOdbiorcy)
                .HasMaxLength(255)
                .HasColumnName("Dane_Odbiorcy");
            entity.Property(e => e.DataNadania)
                .HasPrecision(0)
                .HasColumnName("Data_Nadania");
            entity.Property(e => e.Gabaryt).HasDefaultValue(false);
            entity.Property(e => e.KodPocztowyNadawcy)
                .HasMaxLength(255)
                .HasColumnName("Kod_Pocztowy_Nadawcy");
            entity.Property(e => e.KodPocztowyOdbiorcy)
                .HasMaxLength(255)
                .HasColumnName("Kod_Pocztowy_Odbiorcy");
            entity.Property(e => e.SsmaTimeStamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("SSMA_TimeStamp");
            entity.Property(e => e.Status)
                .HasMaxLength(255)
                .HasComment("Gdzie się teraz znajduje");
        });

        modelBuilder.Entity<Pracownicy>(entity =>
        {
            entity.HasKey(e => e.IdPracownika).HasName("Pracownicy$PrimaryKey");

            entity.ToTable("Pracownicy");

            entity.Property(e => e.IdPracownika).HasColumnName("Id_Pracownika");
            entity.Property(e => e.Adres).HasMaxLength(255);
            entity.Property(e => e.Hasło).HasMaxLength(255);
            entity.Property(e => e.IdUprawnienia)
                .HasDefaultValue(0)
                .HasColumnName("Id_Uprawnienia");
            entity.Property(e => e.Imię).HasMaxLength(255);
            entity.Property(e => e.Login).HasMaxLength(255);
            entity.Property(e => e.Nazwisko).HasMaxLength(255);
            entity.Property(e => e.NrTelefonu)
                .HasMaxLength(11)
                .HasColumnName("Nr_telefonu");

            entity.HasOne(d => d.IdUprawnieniaNavigation).WithMany(p => p.Pracownicies)
                .HasForeignKey(d => d.IdUprawnienia)
                .HasConstraintName("Pracownicy$UprawnieniaPracownicy");
        });

        modelBuilder.Entity<PracownikLadunek>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Pracownik_Ladunek");

            entity.HasIndex(e => e.IdLadunku, "Pracownik_Ladunek$Id_Ladunku");

            entity.Property(e => e.IdLadunku)
                .HasDefaultValue(0)
                .HasColumnName("Id_Ladunku");
            entity.Property(e => e.IdPracownika)
                .HasDefaultValue(0)
                .HasColumnName("Id_Pracownika");

            entity.HasOne(d => d.IdLadunkuNavigation).WithMany()
                .HasForeignKey(d => d.IdLadunku)
                .HasConstraintName("Pracownik_Ladunek$LadunekPracownik_Ladunek");

            entity.HasOne(d => d.IdPracownikaNavigation).WithMany()
                .HasForeignKey(d => d.IdPracownika)
                .HasConstraintName("Pracownik_Ladunek$PracownicyPracownik_Ladunek");
        });

        modelBuilder.Entity<Region>(entity =>
        {
            entity.HasKey(e => e.IdRegion).HasName("Region$PrimaryKey");

            entity.ToTable("Region");

            entity.HasIndex(e => e.NazwaMagazynu, "Region$Id_Rejon");

            entity.Property(e => e.IdRegion)
                .HasMaxLength(255)
                .HasColumnName("Id_Region");
            entity.Property(e => e.NazwaMagazynu)
                .HasMaxLength(255)
                .HasColumnName("Nazwa Magazynu");
        });

        modelBuilder.Entity<Rejon>(entity =>
        {
            entity.HasKey(e => e.IdRejon).HasName("Rejon$PrimaryKey");

            entity.ToTable("Rejon");

            entity.HasIndex(e => e.KodPocztowy, "Rejon$Kod_Pocztowy");

            entity.Property(e => e.IdRejon)
                .HasMaxLength(255)
                .HasColumnName("Id_Rejon");
            entity.Property(e => e.KodPocztowy)
                .HasMaxLength(255)
                .HasColumnName("Kod_Pocztowy");
        });

        modelBuilder.Entity<Samochody>(entity =>
        {
            entity.HasKey(e => e.SamochodId).HasName("Samochody$PrimaryKey");

            entity.ToTable("Samochody");

            entity.Property(e => e.SamochodId).HasColumnName("Samochod_Id");
            entity.Property(e => e.Rejestracja).HasMaxLength(255);
            entity.Property(e => e.Typ).HasMaxLength(255);
        });

        modelBuilder.Entity<Uprawnienium>(entity =>
        {
            entity.HasKey(e => e.IdUprawnienia).HasName("Uprawnienia$PrimaryKey");

            entity.Property(e => e.IdUprawnienia).HasColumnName("Id_Uprawnienia");
            entity.Property(e => e.NazwaUprawnienia)
                .HasMaxLength(255)
                .HasColumnName("Nazwa_uprawnienia");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}